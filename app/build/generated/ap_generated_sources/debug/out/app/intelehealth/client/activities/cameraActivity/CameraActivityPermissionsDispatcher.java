// This file was generated by PermissionsDispatcher. Do not modify!
package com.mssa.emk.activities.cameraActivity;

import androidx.core.app.ActivityCompat;
import java.lang.Override;
import java.lang.String;
import java.lang.ref.WeakReference;
import permissions.dispatcher.PermissionRequest;
import permissions.dispatcher.PermissionUtils;

final class CameraActivityPermissionsDispatcher {
  private static final int REQUEST_STARTCAMERA = 0;

  private static final String[] PERMISSION_STARTCAMERA = new String[] {"android.permission.CAMERA"};

  private CameraActivityPermissionsDispatcher() {
  }

  static void startCameraWithCheck(CameraActivity target) {
    if (PermissionUtils.hasSelfPermissions(target, PERMISSION_STARTCAMERA)) {
      target.startCamera();
    } else {
      if (PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_STARTCAMERA)) {
        target.showRationaleForCamera(new StartCameraPermissionRequest(target));
      } else {
        ActivityCompat.requestPermissions(target, PERMISSION_STARTCAMERA, REQUEST_STARTCAMERA);
      }
    }
  }

  static void onRequestPermissionsResult(CameraActivity target, int requestCode, int[] grantResults) {
    switch (requestCode) {
      case REQUEST_STARTCAMERA:
      if (PermissionUtils.getTargetSdkVersion(target) < 23 && !PermissionUtils.hasSelfPermissions(target, PERMISSION_STARTCAMERA)) {
        target.showDeniedForCamera();
        return;
      }
      if (PermissionUtils.verifyPermissions(grantResults)) {
        target.startCamera();
      } else {
        if (!PermissionUtils.shouldShowRequestPermissionRationale(target, PERMISSION_STARTCAMERA)) {
          target.showNeverAskForCamera();
        } else {
          target.showDeniedForCamera();
        }
      }
      break;
      default:
      break;
    }
  }

  private static final class StartCameraPermissionRequest implements PermissionRequest {
    private final WeakReference<CameraActivity> weakTarget;

    private StartCameraPermissionRequest(CameraActivity target) {
      this.weakTarget = new WeakReference<CameraActivity>(target);
    }

    @Override
    public void proceed() {
      CameraActivity target = weakTarget.get();
      if (target == null) return;
      ActivityCompat.requestPermissions(target, PERMISSION_STARTCAMERA, REQUEST_STARTCAMERA);
    }

    @Override
    public void cancel() {
      CameraActivity target = weakTarget.get();
      if (target == null) return;
      target.showDeniedForCamera();
    }
  }
}
